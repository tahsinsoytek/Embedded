D G "__PCM__" 0 0 ""5.015""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""22-Nis-22""
D G "__TIME__" 0 0 ""20:19:45"" "Standard Header file for the PIC16F877 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
v L "value" 2 37 "int8" `53 
f B "set_tris_a" 2 37 "void(int8 value)" `52 
v L "value" 2 38 "int8" `55 
f B "set_tris_b" 2 38 "void(int8 value)" `54 
v L "value" 2 39 "int8" `57 
f B "set_tris_c" 2 39 "void(int8 value)" `56 
v L "value" 2 40 "int8" `59 
f B "set_tris_d" 2 40 "void(int8 value)" `58 
v L "value" 2 41 "int8" `61 
f B "set_tris_e" 2 41 "void(int8 value)" `60 
f B "get_tris_a" 2 42 "int8()" `62 
f B "get_tris_b" 2 43 "int8()" `63 
f B "get_tris_c" 2 44 "int8()" `64 
f B "get_tris_d" 2 45 "int8()" `65 
f B "get_tris_e" 2 46 "int8()" `66 
v L "value" 2 47 "int8" `68 
f B "output_a" 2 47 "void(int8 value)" `67 
v L "value" 2 48 "int8" `70 
f B "output_b" 2 48 "void(int8 value)" `69 
v L "value" 2 49 "int8" `72 
f B "output_c" 2 49 "void(int8 value)" `71 
v L "value" 2 50 "int8" `74 
f B "output_d" 2 50 "void(int8 value)" `73 
v L "value" 2 51 "int8" `76 
f B "output_e" 2 51 "void(int8 value)" `75 
f B "input_a" 2 52 "int8()" `77 
f B "input_b" 2 53 "int8()" `78 
f B "input_c" 2 54 "int8()" `79 
f B "input_d" 2 55 "int8()" `80 
f B "input_e" 2 56 "int8()" `81 
f B "input_change_a" 2 57 "int8()" `82 
f B "input_change_b" 2 58 "int8()" `83 
f B "input_change_c" 2 59 "int8()" `84 
f B "input_change_d" 2 60 "int8()" `85 
f B "input_change_e" 2 61 "int8()" `86 
v L "pin" 2 62 "int16" `88 
f B "input" 2 62 "int8(int16 pin)" `87 
v L "pin" 2 63 "int16" `90 
f B "input_state" 2 63 "int8(int16 pin)" `89 
v L "pin" 2 64 "int16" `92 
f B "output_low" 2 64 "void(int16 pin)" `91 
v L "pin" 2 65 "int16" `94 
f B "output_high" 2 65 "void(int16 pin)" `93 
v L "pin" 2 66 "int16" `96 
f B "output_toggle" 2 66 "void(int16 pin)" `95 
v L "pin" 2 67 "int16" `98 
v L "level" 2 67 "int8" `99 
f B "output_bit" 2 67 "void(int16 pin,int8 level)" `97 
v L "pin" 2 68 "int16" `101 
f B "output_float" 2 68 "void(int16 pin)" `100 
v L "pin" 2 69 "int16" `103 
f B "output_drive" 2 69 "void(int16 pin)" `102  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 73 "40"
d G "PIN_A1" 2 74 "41"
d G "PIN_A2" 2 75 "42"
d G "PIN_A3" 2 76 "43"
d G "PIN_A4" 2 77 "44"
d G "PIN_A5" 2 78 "45"
d G "PIN_B0" 2 80 "48"
d G "PIN_B1" 2 81 "49"
d G "PIN_B2" 2 82 "50"
d G "PIN_B3" 2 83 "51"
d G "PIN_B4" 2 84 "52"
d G "PIN_B5" 2 85 "53"
d G "PIN_B6" 2 86 "54"
d G "PIN_B7" 2 87 "55"
d G "PIN_C0" 2 89 "56"
d G "PIN_C1" 2 90 "57"
d G "PIN_C2" 2 91 "58"
d G "PIN_C3" 2 92 "59"
d G "PIN_C4" 2 93 "60"
d G "PIN_C5" 2 94 "61"
d G "PIN_C6" 2 95 "62"
d G "PIN_C7" 2 96 "63"
d G "PIN_D0" 2 98 "64"
d G "PIN_D1" 2 99 "65"
d G "PIN_D2" 2 100 "66"
d G "PIN_D3" 2 101 "67"
d G "PIN_D4" 2 102 "68"
d G "PIN_D5" 2 103 "69"
d G "PIN_D6" 2 104 "70"
d G "PIN_D7" 2 105 "71"
d G "PIN_E0" 2 107 "72"
d G "PIN_E1" 2 108 "73"
d G "PIN_E2" 2 109 "74"
d G "FALSE" 2 112 "0"
d G "TRUE" 2 113 "1"
d G "BYTE" 2 115 "int8"
d G "BOOLEAN" 2 116 "int1"
d G "getc" 2 118 "getch"
d G "fgetc" 2 119 "getch"
d G "getchar" 2 120 "getch"
d G "putc" 2 121 "putchar"
d G "fputc" 2 122 "putchar"
d G "fgets" 2 123 "gets"
d G "fputs" 2 124 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f B "restart_cause" 2 129 "int8()" `104 
f B "reset_cpu" 2 130 "void()" `105 
f B "sleep" 2 131 "void()" `106  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 2 133 "3"
d G "WDT_TIMEOUT" 2 134 "11"
d G "MCLR_FROM_SLEEP" 2 135 "19"
d G "MCLR_FROM_RUN" 2 136 "27"
d G "NORMAL_POWER_UP" 2 137 "25"
d G "BROWNOUT_RESTART" 2 138 "26"
c L "sleep" 2 3 5 "FUNCTION"
v L "mode" 2 145 "int8" `108 
f B "setup_timer_0" 2 145 "void(int8 mode)" `107 
v L "value" 2 146 "int8" `110 
f B "set_timer0" 2 146 "void(int8 value)" `109 
f B "get_timer0" 2 147 "int8()" `111 
v L "mode" 2 148 "int8" `113 
v L "prescaler" 2 148 "int8" `114 
f B "setup_counters" 2 148 "void(int8 mode,int8 prescaler)" `112 
v L "value" 2 149 "int8" `116 
f B "set_rtcc" 2 149 "void(int8 value)" `115 
f B "get_rtcc" 2 150 "int8()" `117  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 152 "0"
d G "T0_EXT_L_TO_H" 2 153 "32"
d G "T0_EXT_H_TO_L" 2 154 "48"
d G "T0_DIV_1" 2 156 "8"
d G "T0_DIV_2" 2 157 "0"
d G "T0_DIV_4" 2 158 "1"
d G "T0_DIV_8" 2 159 "2"
d G "T0_DIV_16" 2 160 "3"
d G "T0_DIV_32" 2 161 "4"
d G "T0_DIV_64" 2 162 "5"
d G "T0_DIV_128" 2 163 "6"
d G "T0_DIV_256" 2 164 "7"
d G "T0_8_BIT" 2 167 "0"
d G "RTCC_INTERNAL" 2 169 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 170 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 171 "48"
d G "RTCC_DIV_1" 2 172 "8"
d G "RTCC_DIV_2" 2 173 "0"
d G "RTCC_DIV_4" 2 174 "1"
d G "RTCC_DIV_8" 2 175 "2"
d G "RTCC_DIV_16" 2 176 "3"
d G "RTCC_DIV_32" 2 177 "4"
d G "RTCC_DIV_64" 2 178 "5"
d G "RTCC_DIV_128" 2 179 "6"
d G "RTCC_DIV_256" 2 180 "7"
d G "RTCC_8_BIT" 2 181 "0"
c L "get_rtcc" 2 3 8 "FUNCTION"
v L "mode" 2 192 "int16" `119 
f B "setup_wdt" 2 192 "void(int16 mode)" `118 
f B "restart_wdt" 2 193 "void()" `120  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 2 196 "8"
d G "WDT_36MS" 2 197 "9"
d G "WDT_72MS" 2 198 "10"
d G "WDT_144MS" 2 199 "11"
d G "WDT_288MS" 2 200 "12"
d G "WDT_576MS" 2 201 "13"
d G "WDT_1152MS" 2 202 "14"
d G "WDT_2304MS" 2 203 "15"
c L "restart_wdt" 2 3 3 "FUNCTION"
v L "mode" 2 209 "int16" `122 
f B "setup_timer_1" 2 209 "void(int16 mode)" `121 
f B "get_timer1" 2 210 "int16()" `123 
v L "value" 2 211 "int16" `125 
f B "set_timer1" 2 211 "void(int16 value)" `124  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 214 "0"
d G "T1_INTERNAL" 2 215 "0x85"
d G "T1_EXTERNAL" 2 216 "0x87"
d G "T1_EXTERNAL_SYNC" 2 217 "0x83"
d G "T1_CLK_OUT" 2 219 "8"
d G "T1_DIV_BY_1" 2 221 "0"
d G "T1_DIV_BY_2" 2 222 "0x10"
d G "T1_DIV_BY_4" 2 223 "0x20"
d G "T1_DIV_BY_8" 2 224 "0x30"
c L "set_timer1" 2 3 3 "FUNCTION"
v L "mode" 2 229 "int8" `127 
v L "period" 2 229 "int8" `128 
v L "postscale" 2 229 "int8" `129 
f B "setup_timer_2" 2 229 "void(int8 mode,int8 period,int8 postscale)" `126 
f B "get_timer2" 2 230 "int8()" `130 
v L "value" 2 231 "int8" `132 
f B "set_timer2" 2 231 "void(int8 value)" `131  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 233 "0"
d G "T2_DIV_BY_1" 2 234 "4"
d G "T2_DIV_BY_4" 2 235 "5"
d G "T2_DIV_BY_16" 2 236 "6"
c L "set_timer2" 2 3 4 "FUNCTION"
v L "mode" 2 242 "int32" `134 
f B "setup_ccp1" 2 242 "void(int32 mode)" `133 
v L "mode" 2 243 "int32" `136 
v L "pwm" 2 243 "int8" `137 
f G "setup_ccp1" 2 243 "void(int32 mode,int8 pwm)" `135 
v L "value" 2 244 "int16" `139 
f B "set_pwm1_duty" 2 244 "void(int16 value)" `138  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 246 "0"
d G "CCP_CAPTURE_FE" 2 247 "4"
d G "CCP_CAPTURE_RE" 2 248 "5"
d G "CCP_CAPTURE_DIV_4" 2 249 "6"
d G "CCP_CAPTURE_DIV_16" 2 250 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 2 251 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 252 "9"
d G "CCP_COMPARE_INT" 2 253 "0xA"
d G "CCP_COMPARE_RESET_TIMER" 2 254 "0xB"
d G "CCP_PWM" 2 255 "0xC"
d G "CCP_PWM_PLUS_1" 2 256 "0x1c"
d G "CCP_PWM_PLUS_2" 2 257 "0x2c"
d G "CCP_PWM_PLUS_3" 2 258 "0x3c"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
v L "mode" 2 264 "int32" `144 
f B "setup_ccp2" 2 264 "void(int32 mode)" `143 
v L "mode" 2 265 "int32" `146 
v L "pwm" 2 265 "int8" `147 
f G "setup_ccp2" 2 265 "void(int32 mode,int8 pwm)" `145 
v L "value" 2 266 "int16" `149 
f B "set_pwm2_duty" 2 266 "void(int16 value)" `148 
c L "set_pwm2_duty" 2 3 5 "FUNCTION"
v L "mode" 2 275 "int8" `154 
f B "setup_psp" 2 275 "void(int8 mode)" `153 
f B "psp_output_full" 2 276 "int8()" `155 
f B "psp_input_full" 2 277 "int8()" `156 
f B "psp_overflow" 2 278 "int8()" `157  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 2 280 "0x10"
d G "PSP_DISABLED" 2 281 "0"
c L "psp_overflow" 2 3 3 "FUNCTION"
v L "mode" 2 288 "int32" `160 
f B "setup_spi" 2 288 "void(int32 mode)" `159 
v L "value" 2 289 "int8" `162 
f B "spi_write" 2 289 "void(int8 value)" `161 
f B "spi_read" 2 290 "int8()" `163 
v L "value" 2 291 "int8" `165 
f G "spi_read" 2 291 "int8(int8 value)" `164 
f B "spi_data_in" 2 292 "int8()" `166  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 294 "0x00"
d G "SPI_MASTER" 2 295 "0x20"
d G "SPI_SLAVE" 2 296 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 297 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 298 "0x00"
d G "SPI_CLK_DIV_4" 2 299 "0x00"
d G "SPI_CLK_DIV_16" 2 300 "0x01"
d G "SPI_CLK_DIV_64" 2 301 "0x02"
d G "SPI_CLK_T2" 2 302 "0x03"
d G "SPI_SS_DISABLED" 2 303 "0x01"
d G "SPI_XMIT_L_TO_H" 2 305 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 306 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 308 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 309 "0x8000"
d G "SPI_L_TO_H" 2 312 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 313 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 2 3 2 "FUNCTION"
v L "baud" 2 317 "int32" `168 
f B "setup_uart" 2 317 "void(int32 baud)" `167 
v L "baud" 2 318 "int32" `170 
v L "stream" 2 318 "int8" `171 
f G "setup_uart" 2 318 "void(int32 baud,int8 stream)" `169 
v L "baud" 2 319 "int32" `173 
v L "stream" 2 319 "int8" `174 
v L "clock" 2 319 "int32" `175 
f G "setup_uart" 2 319 "void(int32 baud,int8 stream,int32 clock)" `172 
v L "baud" 2 320 "int32" `177 
f B "set_uart_speed" 2 320 "void(int32 baud)" `176 
v L "baud" 2 321 "int32" `179 
v L "stream" 2 321 "int8" `180 
f G "set_uart_speed" 2 321 "void(int32 baud,int8 stream)" `178 
v L "baud" 2 322 "int32" `182 
v L "stream" 2 322 "int8" `183 
v L "clock" 2 322 "int32" `184 
f G "set_uart_speed" 2 322 "void(int32 baud,int8 stream,int32 clock)" `181  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 326 "2"
d G "UART_DATA" 2 327 "4"
c L "set_uart_speed" 2 3 4 "FUNCTION"
v L "mode" 2 334 "int16" `186 
f B "setup_adc" 2 334 "void(int16 mode)" `185 
f B "read_adc" 2 335 "int8()" `187 
v L "mode" 2 336 "int8" `189 
f G "read_adc" 2 336 "int8(int8 mode)" `188 
f G "read_adc" 2 337 "int16()" `190 
v L "mode" 2 338 "int8" `192 
f G "read_adc" 2 338 "int16(int8 mode)" `191 
f B "adc_done" 2 339 "int8()" `193  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 341 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 342 "0x100"
d G "ADC_CLOCK_DIV_8" 2 343 "0x40"
d G "ADC_CLOCK_DIV_32" 2 344 "0x80"
d G "ADC_CLOCK_INTERNAL" 2 345 "0xc0" "Internal 2-6us"
c L "adc_done" 2 3 1 "FUNCTION"
v L "setting" 2 348 "int8" `195 
f B "setup_adc_ports" 2 348 "void(int8 setting)" `194 
v L "channel" 2 349 "int8" `197 
f B "set_adc_channel" 2 349 "void(int8 channel)" `196  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 2 351 "7" "None"
d G "ALL_ANALOG" 2 352 "0" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_AN1_AN2_AN4_AN5_AN6_AN7_VSS_VREF" 2 353 "1" "A0 A1 A2 A5 E0 E1 E2 VRefh=A3"
d G "AN0_AN1_AN2_AN3_AN4" 2 354 "2" "A0 A1 A2 A3 A5"
d G "AN0_AN1_AN2_AN4_VSS_VREF" 2 355 "3" "A0 A1 A2 A4 VRefh=A3"
d G "AN0_AN1_AN3" 2 356 "4" "A0 A1 A3"
d G "AN0_AN1_VSS_VREF" 2 357 "5" "A0 A1 VRefh=A3"
d G "AN0_AN1_AN4_AN5_AN6_AN7_VREF_VREF" 2 358 "0x08" "A0 A1 A5 E0 E1 E2 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN2_AN3_AN4_AN5" 2 359 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_AN1_AN2_AN4_AN5_VSS_VREF" 2 360 "0x0A" "A0 A1 A2 A5 E0 VRefh=A3"
d G "AN0_AN1_AN4_AN5_VREF_VREF" 2 361 "0x0B" "A0 A1 A5 E0 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN4_VREF_VREF" 2 362 "0x0C" "A0 A1 A4 VRefh=A3 VRefl=A2"
d G "AN0_AN1_VREF_VREF" 2 363 "0x0D" "A0 A1 VRefh=A3 VRefl=A2"
d G "AN0" 2 364 "0x0E" "A0"
d G "AN0_VREF_VREF" 2 365 "0x0F" "A0 VRefh=A3 VRefl=A2"
d G "ANALOG_RA3_REF" 2 366 "0x1" "!old only provided for compatibility"
d G "A_ANALOG" 2 367 "0x2" "!old only provided for compatibility"
d G "A_ANALOG_RA3_REF" 2 368 "0x3" "!old only provided for compatibility"
d G "RA0_RA1_RA3_ANALOG" 2 369 "0x4" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_REF" 2 370 "0x5" "!old only provided for compatibility"
d G "ANALOG_RA3_RA2_REF" 2 371 "0x8" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2" 2 372 "0x9" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3" 2 373 "0xA" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3_RA2" 2 374 "0xB" "!old only provided for compatibility"
d G "A_ANALOG_RA3_RA2_REF" 2 375 "0xC" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_RA2_REF" 2 376 "0xD" "!old only provided for compatibility"
d G "RA0_ANALOG" 2 377 "0xE" "!old only provided for compatibility"
d G "RA0_ANALOG_RA3_RA2_REF" 2 378 "0xF" "!old only provided for compatibility"
d G "ADC_START_AND_READ" 2 381 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 382 "1"
d G "ADC_READ_ONLY" 2 383 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
v L "x" 2 389 "sint8" `199 
f B "abs" 2 389 "sint8(sint8 x)" `198 
v L "x" 2 390 "sint16" `201 
f G "abs" 2 390 "sint16(sint16 x)" `200 
v L "x" 2 391 "sint32" `203 
f G "abs" 2 391 "sint32(sint32 x)" `202 
v L "x" 2 392 "float" `205 
f G "abs" 2 392 "float(float x)" `204 
v L "??65535" 2 393 "int8" `207 
v L "??65535" 2 393 "int8" `208 
f B "_mul" 2 393 "int16(int8 ,int8 )" `206 
v L "??65535" 2 394 "sint8" `207 
v L "??65535" 2 394 "sint8" `211 
f G "_mul" 2 394 "sint16(sint8 ,sint8 )" `209 
v L "??65535" 2 395 "int16" `207 
v L "??65535" 2 395 "int16" `214 
f G "_mul" 2 395 "int32(int16 ,int16 )" `212 
v L "??65535" 2 396 "sint16" `207 
v L "??65535" 2 396 "sint16" `217 
f G "_mul" 2 396 "sint32(sint16 ,sint16 )" `215  "Memory Manipulation Prototypes:"
v L "bank" 2 399 "int8" `219 
v L "offset" 2 399 "int8" `220 
f B "read_bank" 2 399 "int8(int8 bank,int8 offset)" `218 
v L "bank" 2 400 "int8" `222 
v L "offset" 2 400 "int8" `223 
v L "value" 2 400 "int8" `224 
f B "write_bank" 2 400 "void(int8 bank,int8 offset,int8 value)" `221 
v L "dest" 2 401 "*int8" `226 
v L "src" 2 401 "*int8" `227 
f B "strcpy" 2 401 "void(*int8 dest,*int8 src)" `225 
v L "dest" 2 402 "*int8" `229 
v L "src" 2 402 "*int8" `230 
f B "strcopy" 2 402 "void(*int8 dest,*int8 src)" `228 
v L "destination" 2 403 "*int8" `232 
v L "value" 2 403 "int8" `233 
v L "num" 2 403 "int16" `234 
f B "memset" 2 403 "void(*int8 destination,int8 value,int16 num)" `231 
v L "destination" 2 404 "*int8" `236 
v L "source" 2 404 "*int8" `237 
v L "num" 2 404 "int16" `238 
f B "memcpy" 2 404 "void(*int8 destination,*int8 source,int16 num)" `235  "String Prototypes:"
v L "cvalue" 2 407 "int8" `240 
f B "toupper" 2 407 "int8(int8 cvalue)" `239 
v L "cvalue" 2 408 "int8" `242 
f B "tolower" 2 408 "int8(int8 cvalue)" `241 
v L "string" 2 409 "*int8" `244 
v L "cstring" 2 409 "*int8" `245 
f B "sprintf" 2 409 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `243  "Data Manipulators Prototypes:"
v L "address" 2 412 "*int8" `248 
v L "bytes" 2 412 "int8" `249 
v L "value" 2 412 "int8" `250 
f B "shift_left" 2 412 "int8(*int8 address,int8 bytes,int8 value)" `247 
v L "address" 2 413 "*int8" `252 
v L "bytes" 2 413 "int8" `253 
v L "value" 2 413 "int8" `254 
f B "shift_right" 2 413 "int8(*int8 address,int8 bytes,int8 value)" `251 
v L "address" 2 414 "*int8" `256 
v L "bytes" 2 414 "int8" `257 
f B "rotate_left" 2 414 "void(*int8 address,int8 bytes)" `255 
v L "address" 2 415 "*int8" `259 
v L "bytes" 2 415 "int8" `260 
f B "rotate_right" 2 415 "void(*int8 address,int8 bytes)" `258 
v L "value" 2 416 "int8" `262 
f B "swap" 2 416 "void(int8 value)" `261 
v L "var" 2 417 "int16" `264 
v L "offset" 2 417 "int8" `265 
f B "make8" 2 417 "int8(int16 var,int8 offset)" `263 
v L "var" 2 418 "int32" `264 
v L "offset" 2 418 "int8" `268 
f G "make8" 2 418 "int8(int32 var,int8 offset)" `266 
v L "varhigh" 2 419 "int8" `270 
v L "varlow" 2 419 "int8" `271 
f B "make16" 2 419 "int16(int8 varhigh,int8 varlow)" `269 
v L "var1" 2 420 "int16" `273 
f B "make32" 2 420 "int32(int16 var1)" `272 
v L "var1" 2 421 "int16" `275 
v L "var2" 2 421 "int16" `276 
f G "make32" 2 421 "int32(int16 var1,int16 var2)" `274 
v L "var1" 2 422 "int16" `275 
v L "var2" 2 422 "int8" `279 
f G "make32" 2 422 "int32(int16 var1,int8 var2)" `277 
v L "var1" 2 423 "int16" `281 
v L "var2" 2 423 "int8" `282 
v L "var3" 2 423 "int8" `283 
f G "make32" 2 423 "int32(int16 var1,int8 var2,int8 var3)" `280 
v L "var1" 2 424 "int8" `285 
f G "make32" 2 424 "int32(int8 var1)" `284 
v L "var1" 2 425 "int8" `275 
v L "var2" 2 425 "int8" `288 
f G "make32" 2 425 "int32(int8 var1,int8 var2)" `286 
v L "var1" 2 426 "int8" `281 
v L "var2" 2 426 "int8" `282 
v L "var3" 2 426 "int8" `292 
f G "make32" 2 426 "int32(int8 var1,int8 var2,int8 var3)" `289 
v L "var1" 2 427 "int8" `294 
v L "var2" 2 427 "int8" `295 
v L "var3" 2 427 "int8" `296 
v L "var4" 2 427 "int8" `297 
f G "make32" 2 427 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `293 
v L "var1" 2 428 "int8" `275 
v L "var2" 2 428 "int16" `300 
f G "make32" 2 428 "int32(int8 var1,int16 var2)" `298 
v L "var1" 2 429 "int8" `281 
v L "var2" 2 429 "int16" `282 
v L "var3" 2 429 "int8" `304 
f G "make32" 2 429 "int32(int8 var1,int16 var2,int8 var3)" `301 
v L "var1" 2 430 "int8" `281 
v L "var2" 2 430 "int8" `282 
v L "var3" 2 430 "int16" `308 
f G "make32" 2 430 "int32(int8 var1,int8 var2,int16 var3)" `305 
v L "var" 2 431 "int8" `310 
v L "bit" 2 431 "int8" `311 
f B "bit_set" 2 431 "void(int8 var,int8 bit)" `309 
v L "var" 2 432 "int16" `310 
v L "bit" 2 432 "int8" `314 
f G "bit_set" 2 432 "void(int16 var,int8 bit)" `312 
v L "var" 2 433 "int32" `310 
v L "bit" 2 433 "int8" `317 
f G "bit_set" 2 433 "void(int32 var,int8 bit)" `315 
v L "var" 2 434 "int8" `319 
v L "bit" 2 434 "int8" `320 
f B "bit_clear" 2 434 "void(int8 var,int8 bit)" `318 
v L "var" 2 435 "int16" `319 
v L "bit" 2 435 "int8" `323 
f G "bit_clear" 2 435 "void(int16 var,int8 bit)" `321 
v L "var" 2 436 "int32" `319 
v L "bit" 2 436 "int8" `326 
f G "bit_clear" 2 436 "void(int32 var,int8 bit)" `324 
v L "var" 2 437 "int8" `328 
v L "bit" 2 437 "int8" `329 
f B "bit_test" 2 437 "int8(int8 var,int8 bit)" `327 
v L "var" 2 438 "int16" `328 
v L "bit" 2 438 "int8" `332 
f G "bit_test" 2 438 "int8(int16 var,int8 bit)" `330 
v L "var" 2 439 "int32" `328 
v L "bit" 2 439 "int8" `335 
f G "bit_test" 2 439 "int8(int32 var,int8 bit)" `333  "#use delay() Prototypes:"
v L "count" 2 442 "int8" `337 
f B "delay_cycles" 2 442 "void(int8 count)" `336 
v L "time" 2 443 "int16" `339 
f B "delay_ms" 2 443 "void(int16 time)" `338 
v L "time" 2 444 "int16" `341 
f B "delay_us" 2 444 "void(int16 time)" `340  "#use rs232() Prototypes:"
v L "cdata" 2 447 "int8" `343 
f B "putchar" 2 447 "void(int8 cdata)" `342 
v L "cdata" 2 448 "int8" `345 
v L "stream" 2 448 "int8" `346 
f G "putchar" 2 448 "void(int8 cdata,int8 stream)" `344 
v L "string" 2 449 "*int8" `348 
f B "puts" 2 449 "void(*int8 string)" `347 
v L "string" 2 450 "*int8" `350 
v L "stream" 2 450 "int8" `351 
f G "puts" 2 450 "void(*int8 string,int8 stream)" `349 
f B "getch" 2 451 "int8()" `352 
v L "stream" 2 452 "int8" `354 
f G "getch" 2 452 "int8(int8 stream)" `353 
v L "string" 2 453 "*int8" `356 
f B "gets" 2 453 "void(*int8 string)" `355 
v L "string" 2 454 "*int8" `358 
v L "stream" 2 454 "int8" `359 
f G "gets" 2 454 "void(*int8 string,int8 stream)" `357 
f B "kbhit" 2 455 "int8()" `360 
v L "stream" 2 456 "int8" `362 
f G "kbhit" 2 456 "int8(int8 stream)" `361 
v L "string" 2 457 "*int8" `364 
f B "printf" 2 457 "void(*int8 string,*int8 _VA_LIST)" `363 
v L "stream" 2 458 "int8" `367 
v L "string" 2 458 "*int8" `368 
f B "fprintf" 2 458 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `366 
f B "putc_send" 2 459 "void()" `370 
v L "stream" 2 460 "int8" `372 
f B "fputc_send" 2 460 "void(int8 stream)" `371 
f B "rcv_buffer_full" 2 461 "int8()" `373 
v L "stream" 2 462 "int8" `375 
f G "rcv_buffer_full" 2 462 "int8(int8 stream)" `374 
f B "rcv_buffer_bytes" 2 463 "int16()" `376 
v L "stream" 2 464 "int8" `378 
f G "rcv_buffer_bytes" 2 464 "int16(int8 stream)" `377 
f B "tx_buffer_full" 2 465 "int8()" `379 
v L "stream" 2 466 "int8" `381 
f G "tx_buffer_full" 2 466 "int8(int8 stream)" `380 
f B "tx_buffer_bytes" 2 467 "int16()" `382 
v L "stream" 2 468 "int8" `384 
f G "tx_buffer_bytes" 2 468 "int16(int8 stream)" `383  "#use i2c() Prototypes:"
f B "i2c_read" 2 471 "int8()" `385 
v L "stream" 2 472 "int8" `387 
f G "i2c_read" 2 472 "int8(int8 stream)" `386 
v L "stream" 2 473 "int8" `389 
v L "ack" 2 473 "int8" `390 
f G "i2c_read" 2 473 "int8(int8 stream,int8 ack)" `388 
v L "data" 2 474 "int8" `392 
f B "i2c_write" 2 474 "int8(int8 data)" `391 
v L "stream" 2 475 "int8" `394 
v L "data" 2 475 "int8" `395 
f G "i2c_write" 2 475 "int8(int8 stream,int8 data)" `393 
f B "i2c_start" 2 476 "void()" `396 
v L "stream" 2 477 "int8" `398 
f G "i2c_start" 2 477 "void(int8 stream)" `397 
v L "stream" 2 478 "int8" `400 
v L "restart" 2 478 "int8" `401 
f G "i2c_start" 2 478 "void(int8 stream,int8 restart)" `399 
f B "i2c_stop" 2 479 "void()" `402 
v L "stream" 2 480 "int8" `404 
f G "i2c_stop" 2 480 "void(int8 stream)" `403 
f B "i2c_isr_state" 2 481 "int8()" `405 
v L "addr" 2 482 "int8" `407 
f B "i2c_slaveaddr" 2 482 "void(int8 addr)" `406 
v L "stream" 2 483 "int8" `409 
v L "addr" 2 483 "int8" `410 
f G "i2c_slaveaddr" 2 483 "void(int8 stream,int8 addr)" `408 
f B "i2c_poll" 2 484 "int8()" `411 
v L "stream" 2 485 "int8" `413 
f G "i2c_poll" 2 485 "int8(int8 stream)" `412 
v L "baud" 2 486 "int32" `415 
f B "i2c_init" 2 486 "void(int32 baud)" `414 
v L "stream" 2 487 "int8" `417 
v L "baud" 2 487 "int32" `418 
f G "i2c_init" 2 487 "void(int8 stream,int32 baud)" `416  "#use spi() Prototypes:"
f B "spi_xfer" 2 490 "int8()" `419 
f G "spi_xfer" 2 491 "int16()" `420 
f G "spi_xfer" 2 492 "int32()" `421 
v L "data" 2 493 "int8" `423 
f G "spi_xfer" 2 493 "int8(int8 data)" `422 
v L "data" 2 494 "int16" `425 
f G "spi_xfer" 2 494 "int16(int16 data)" `424 
v L "data" 2 495 "int32" `427 
f G "spi_xfer" 2 495 "int32(int32 data)" `426 
v L "stream" 2 496 "int8" `429 
v L "data" 2 496 "int8" `430 
f G "spi_xfer" 2 496 "int8(int8 stream,int8 data)" `428 
v L "stream" 2 497 "int8" `429 
v L "data" 2 497 "int16" `433 
f G "spi_xfer" 2 497 "int16(int8 stream,int16 data)" `431 
v L "stream" 2 498 "int8" `429 
v L "data" 2 498 "int32" `436 
f G "spi_xfer" 2 498 "int32(int8 stream,int32 data)" `434 
v L "stream" 2 499 "int8" `438 
v L "data" 2 499 "int8" `439 
v L "bits" 2 499 "int8" `440 
f G "spi_xfer" 2 499 "int8(int8 stream,int8 data,int8 bits)" `437 
v L "stream" 2 500 "int8" `438 
v L "data" 2 500 "int16" `439 
v L "bits" 2 500 "int8" `444 
f G "spi_xfer" 2 500 "int16(int8 stream,int16 data,int8 bits)" `441 
v L "stream" 2 501 "int8" `438 
v L "data" 2 501 "int32" `439 
v L "bits" 2 501 "int8" `448 
f G "spi_xfer" 2 501 "int32(int8 stream,int32 data,int8 bits)" `445 
v L "baud" 2 502 "int32" `450 
f B "spi_init" 2 502 "void(int32 baud)" `449 
v L "stream" 2 503 "int8" `452 
v L "baud" 2 503 "int32" `453 
f G "spi_init" 2 503 "void(int8 stream,int32 baud)" `451 
v L "baud" 2 504 "int32" `455 
f B "spi_speed" 2 504 "void(int32 baud)" `454 
v L "stream" 2 505 "int8" `457 
v L "baud" 2 505 "int32" `458 
f G "spi_speed" 2 505 "void(int8 stream,int32 baud)" `456 
v L "stream" 2 506 "int8" `460 
v L "baud" 2 506 "int32" `461 
v L "clock" 2 506 "int32" `462 
f G "spi_speed" 2 506 "void(int8 stream,int32 baud,int32 clock)" `459 
v L "data" 2 507 "int8" `464 
f B "spi_prewrite" 2 507 "void(int8 data)" `463 
v L "data" 2 508 "int16" `466 
f G "spi_prewrite" 2 508 "void(int16 data)" `465 
v L "data" 2 509 "int32" `468 
f G "spi_prewrite" 2 509 "void(int32 data)" `467 
v L "??65535" 2 510 "int8" `470 
v L "data" 2 510 "int8" `471 
f G "spi_prewrite" 2 510 "void(int8 ,int8 data)" `469 
v L "??65535" 2 511 "int8" `470 
v L "data" 2 511 "int16" `474 
f G "spi_prewrite" 2 511 "void(int8 ,int16 data)" `472 
v L "??65535" 2 512 "int8" `470 
v L "data" 2 512 "int32" `477 
f G "spi_prewrite" 2 512 "void(int8 ,int32 data)" `475 
f B "spi_xfer_in" 2 513 "int8()" `478 
f G "spi_xfer_in" 2 514 "int16()" `479 
f G "spi_xfer_in" 2 515 "int32()" `480 
v L "bits" 2 516 "int8" `482 
f G "spi_xfer_in" 2 516 "int8(int8 bits)" `481 
v L "bits" 2 517 "int8" `484 
f G "spi_xfer_in" 2 517 "int16(int8 bits)" `483 
v L "bits" 2 518 "int8" `486 
f G "spi_xfer_in" 2 518 "int32(int8 bits)" `485 
v L "stream" 2 519 "int8" `488 
v L "bits" 2 519 "int8" `489 
f G "spi_xfer_in" 2 519 "int8(int8 stream,int8 bits)" `487 
v L "stream" 2 520 "int8" `488 
v L "bits" 2 520 "int8" `492 
f G "spi_xfer_in" 2 520 "int16(int8 stream,int8 bits)" `490 
v L "stream" 2 521 "int8" `488 
v L "bits" 2 521 "int8" `495 
f G "spi_xfer_in" 2 521 "int32(int8 stream,int8 bits)" `493  "#use rtos() Prototypes:"
f B "rtos_run" 2 524 "void()" `496 
f B "rtos_yield" 2 525 "void()" `497 
v L "task" 2 526 "int8" `499 
f B "rtos_enable" 2 526 "void(int8 task)" `498 
v L "task" 2 527 "int8" `501 
f B "rtos_disable" 2 527 "void(int8 task)" `500 
f B "rtos_terminate" 2 528 "void()" `502 
v L "flag" 2 529 "int8" `504 
f B "rtos_await" 2 529 "void(int8 flag)" `503 
v L "sem" 2 530 "int8" `506 
f B "rtos_wait" 2 530 "void(int8 sem)" `505 
v L "sem" 2 531 "int8" `508 
f B "rtos_signal" 2 531 "void(int8 sem)" `507 
v L "task" 2 532 "int8" `510 
v L "msg" 2 532 "int8" `511 
f B "rtos_msg_send" 2 532 "void(int8 task,int8 msg)" `509 
f B "rtos_msg_read" 2 533 "int8()" `512 
f B "rtos_msg_poll" 2 534 "int8()" `513 
v L "task" 2 535 "int8" `515 
f B "rtos_overrun" 2 535 "int8(int8 task)" `514 
v L "task" 2 536 "int8" `517 
v L "stat" 2 536 "*int8" `518 
f B "rtos_stats" 2 536 "void(int8 task,*int8 stat)" `516  "#use timer() Prototypes:"
f B "get_ticks" 2 539 "int8()" `519 
f G "get_ticks" 2 540 "int16()" `520 
f G "get_ticks" 2 541 "int32()" `521 
v L "stream" 2 542 "int8" `523 
f G "get_ticks" 2 542 "int8(int8 stream)" `522 
v L "stream" 2 543 "int8" `525 
f G "get_ticks" 2 543 "int16(int8 stream)" `524 
v L "stream" 2 544 "int8" `527 
f G "get_ticks" 2 544 "int32(int8 stream)" `526 
v L "value" 2 545 "int8" `529 
f B "set_ticks" 2 545 "void(int8 value)" `528 
v L "value" 2 546 "int16" `531 
f G "set_ticks" 2 546 "void(int16 value)" `530 
v L "value" 2 547 "int32" `533 
f G "set_ticks" 2 547 "void(int32 value)" `532 
v L "stream" 2 548 "int8" `535 
v L "value" 2 548 "int8" `536 
f G "set_ticks" 2 548 "void(int8 stream,int8 value)" `534 
v L "stream" 2 549 "int8" `535 
v L "value" 2 549 "int16" `539 
f G "set_ticks" 2 549 "void(int8 stream,int16 value)" `537 
v L "stream" 2 550 "int8" `535 
v L "value" 2 550 "int32" `542 
f G "set_ticks" 2 550 "void(int8 stream,int32 value)" `540  "#use pwm() Prototypes:"
f B "pwm_on" 2 553 "void()" `543 
v L "stream" 2 554 "int8" `545 
f G "pwm_on" 2 554 "void(int8 stream)" `544 
f B "pwm_off" 2 555 "void()" `546 
v L "stream" 2 556 "int8" `548 
f G "pwm_off" 2 556 "void(int8 stream)" `547 
v L "duty" 2 557 "int16" `550 
f B "pwm_set_duty" 2 557 "void(int16 duty)" `549 
v L "stream" 2 558 "int8" `552 
v L "duty" 2 558 "int16" `553 
f G "pwm_set_duty" 2 558 "void(int8 stream,int16 duty)" `551 
v L "percent" 2 559 "int16" `555 
f B "pwm_set_duty_percent" 2 559 "void(int16 percent)" `554 
v L "stream" 2 560 "int8" `557 
v L "percent" 2 560 "int16" `558 
f G "pwm_set_duty_percent" 2 560 "void(int8 stream,int16 percent)" `556 
v L "frequency" 2 561 "int32" `560 
f B "pwm_set_frequency" 2 561 "void(int32 frequency)" `559 
v L "stream" 2 562 "int8" `562 
v L "frequency" 2 562 "int32" `563 
f G "pwm_set_frequency" 2 562 "void(int8 stream,int32 frequency)" `561  "#use capture() Prototypes:"
f B "get_capture_time" 2 565 "int16()" `564 
v L "stream" 2 566 "int8" `566 
f G "get_capture_time" 2 566 "int16(int8 stream)" `565 
f B "get_capture_event" 2 567 "int8()" `567 
v L "stream" 2 568 "int8" `569 
f G "get_capture_event" 2 568 "int8(int8 stream)" `568  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
v L "address" 2 581 "int16" `571 
f B "goto_address" 2 581 "void(int16 address)" `570 
v L "label" 2 582 "int16" `573 
f B "label_address" 2 582 "int16(int16 label)" `572  "Program Memory Prototypes:"
v L "address" 2 585 "int16" `575 
v L "dataptr" 2 585 "*int8" `576 
v L "count" 2 585 "int16" `577 
f B "read_program_memory" 2 585 "void(int16 address,*int8 dataptr,int16 count)" `574 
v L "address" 2 586 "int16" `579 
f B "read_program_eeprom" 2 586 "int16(int16 address)" `578 
v L "address" 2 587 "int16" `581 
f B "erase_program_eeprom" 2 587 "void(int16 address)" `580 
v L "address" 2 588 "int16" `583 
v L "dataptr" 2 588 "*int8" `584 
v L "count" 2 588 "int16" `585 
f B "write_program_memory" 2 588 "void(int16 address,*int8 dataptr,int16 count)" `582 
v L "address" 2 589 "int16" `587 
v L "data" 2 589 "int16" `588 
f B "write_program_eeprom" 2 589 "void(int16 address,int16 data)" `586  "EEPROM Prototypes:"
t G "__EEADDRESS__" 2 594 "int16" `589 
v L "address" 2 599 "__EEADDRESS__" `591 
f B "read_eeprom" 2 599 "int8(__EEADDRESS__ address)" `590 
v L "address" 2 600 "__EEADDRESS__" `593 
v L "value" 2 600 "int8" `594 
f B "write_eeprom" 2 600 "void(__EEADDRESS__ address,int8 value)" `592  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
v L "interrupt" 2 607 "int32" `596 
f B "enable_interrupts" 2 607 "void(int32 interrupt)" `595 
v L "interrupt" 2 608 "int32" `598 
f B "disable_interrupts" 2 608 "void(int32 interrupt)" `597 
v L "interrupt" 2 609 "int32" `600 
f B "clear_interrupt" 2 609 "void(int32 interrupt)" `599 
v L "interrupt" 2 610 "int32" `602 
f B "interrupt_active" 2 610 "int8(int32 interrupt)" `601 
v L "interrupt" 2 611 "int32" `604 
f B "interrupt_enabled" 2 611 "int8(int32 interrupt)" `603 
v L "source" 2 612 "int8" `606 
v L "edge" 2 612 "int8" `607 
f B "ext_int_edge" 2 612 "void(int8 source,int8 edge)" `605 
v L "address" 2 613 "int16" `609 
f B "jump_to_irs" 2 613 "void(int16 address)" `608  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 615 "0x40"
d G "H_TO_L" 2 616 "0"
d G "GLOBAL" 2 618 "0x0BC0"
d G "PERIPH" 2 619 "0x0B40"
d G "INT_RTCC" 2 620 "0x000B20"
d G "INT_RB" 2 621 "0x00FF0B08"
d G "INT_EXT_L2H" 2 622 "0x50000B10"
d G "INT_EXT_H2L" 2 623 "0x60000B10"
d G "INT_EXT" 2 624 "0x000B10"
d G "INT_AD" 2 625 "0x008C40"
d G "INT_TBE" 2 626 "0x008C10"
d G "INT_RDA" 2 627 "0x008C20"
d G "INT_TIMER1" 2 628 "0x008C01"
d G "INT_TIMER2" 2 629 "0x008C02"
d G "INT_CCP1" 2 630 "0x008C04"
d G "INT_CCP2" 2 631 "0x008D01"
d G "INT_SSP" 2 632 "0x008C08"
d G "INT_PSP" 2 633 "0x008C80"
d G "INT_BUSCOL" 2 634 "0x008D08"
d G "INT_EEPROM" 2 635 "0x008D10"
d G "INT_TIMER0" 2 636 "0x000B20"
F G "main" 0 4 "void()" `614 
V L "digits" 0 5 "int8[10]" `615 
V L "i" 0 8 "int8" `618 
V L "j" 0 9 "int8" `619 
V L "x" 0 10 "int8" `620 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
