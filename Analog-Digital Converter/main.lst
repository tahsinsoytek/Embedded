CCS PCM C Compiler, Version 5.015, 5967               06-Aðu-21 18:24

               Filename:   D:\Masaüstü\Embedded Systems(Gömülü Sistemler)\Projeler\Proje 12(Analog-Digital Converter)\main.lst

               ROM used:   899 words (11%)
                           Largest free fragment is 2048
               RAM used:   23 (6%) at main() level
                           42 (11%) worst case
               Stack used: 7 locations (5 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   2B0
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  MOVLW  8C
0028:  MOVWF  04
0029:  BTFSS  00.6
002A:  GOTO   02D
002B:  BTFSC  0C.6
002C:  GOTO   04E
002D:  MOVF   22,W
002E:  MOVWF  04
002F:  MOVF   23,W
0030:  MOVWF  77
0031:  MOVF   24,W
0032:  MOVWF  78
0033:  MOVF   25,W
0034:  MOVWF  79
0035:  MOVF   26,W
0036:  MOVWF  7A
0037:  MOVF   27,W
0038:  BSF    03.6
0039:  MOVWF  0D
003A:  BCF    03.6
003B:  MOVF   28,W
003C:  BSF    03.6
003D:  MOVWF  0F
003E:  BCF    03.6
003F:  MOVF   29,W
0040:  BSF    03.6
0041:  MOVWF  0C
0042:  BCF    03.6
0043:  MOVF   2A,W
0044:  BSF    03.6
0045:  MOVWF  0E
0046:  BCF    03.6
0047:  MOVF   20,W
0048:  MOVWF  0A
0049:  SWAPF  21,W
004A:  MOVWF  03
004B:  SWAPF  7F,F
004C:  SWAPF  7F,W
004D:  RETFIE
004E:  BCF    0A.3
004F:  BCF    0A.4
0050:  GOTO   065
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
0078:  DATA D4,30
0079:  DATA E8,39
007A:  DATA 69,37
007B:  DATA A0,29
007C:  DATA EF,3C
007D:  DATA F4,32
007E:  DATA 6B,00
007F:  DATA 41,22
0080:  DATA 43,10
0081:  DATA D3,30
0082:  DATA 6D,38
0083:  DATA EC,32
0084:  DATA 00,01
0085:  DATA 41,27
0086:  DATA 30,10
0087:  DATA 20,10
0088:  DATA 20,10
0089:  DATA 20,10
008A:  DATA 20,10
008B:  DATA 20,10
008C:  DATA 20,10
008D:  DATA 20,10
008E:  DATA 20,10
008F:  DATA 20,10
0090:  DATA 20,10
0091:  DATA 20,10
0092:  DATA 20,10
0093:  DATA 20,10
0094:  DATA 20,10
0095:  DATA 20,10
0096:  DATA 00,01
0097:  DATA D6,30
0098:  DATA EC,3A
0099:  DATA 65,1D
009A:  DATA 25,36
009B:  DATA 75,00
009C:  DATA 41,27
009D:  DATA 31,10
009E:  DATA 20,10
009F:  DATA 20,10
00A0:  DATA 20,10
00A1:  DATA 20,10
00A2:  DATA 20,10
00A3:  DATA 20,10
00A4:  DATA 20,10
00A5:  DATA 20,10
00A6:  DATA 20,10
00A7:  DATA 20,10
00A8:  DATA 20,10
00A9:  DATA 20,10
00AA:  DATA 20,10
00AB:  DATA 20,10
00AC:  DATA 20,10
00AD:  DATA 00,01
00AE:  DATA D6,30
00AF:  DATA EC,3A
00B0:  DATA 65,1D
00B1:  DATA 25,36
00B2:  DATA 75,00
*
01A0:  MOVF   0B,W
01A1:  MOVWF  31
01A2:  BCF    0B.7
01A3:  BSF    03.5
01A4:  BSF    03.6
01A5:  BSF    0C.7
01A6:  BSF    0C.0
01A7:  NOP
01A8:  NOP
01A9:  BCF    03.5
01AA:  BCF    03.6
01AB:  BTFSC  31.7
01AC:  BSF    0B.7
01AD:  BSF    03.6
01AE:  MOVF   0C,W
01AF:  ANDLW  7F
01B0:  BTFSC  03.2
01B1:  GOTO   1F4
01B2:  BCF    03.6
01B3:  MOVWF  31
01B4:  BSF    03.6
01B5:  MOVF   0D,W
01B6:  BCF    03.6
01B7:  MOVWF  32
01B8:  BSF    03.6
01B9:  MOVF   0F,W
01BA:  BCF    03.6
01BB:  MOVWF  33
01BC:  MOVF   31,W
01BD:  MOVWF  3A
01BE:  CALL   16E
01BF:  MOVF   32,W
01C0:  BSF    03.6
01C1:  MOVWF  0D
01C2:  BCF    03.6
01C3:  MOVF   33,W
01C4:  BSF    03.6
01C5:  MOVWF  0F
01C6:  BCF    03.6
01C7:  MOVF   0B,W
01C8:  MOVWF  34
01C9:  BCF    0B.7
01CA:  BSF    03.5
01CB:  BSF    03.6
01CC:  BSF    0C.7
01CD:  BSF    0C.0
01CE:  NOP
01CF:  NOP
01D0:  BCF    03.5
01D1:  BCF    03.6
01D2:  BTFSC  34.7
01D3:  BSF    0B.7
01D4:  BSF    03.6
01D5:  RLF    0C,W
01D6:  RLF    0E,W
01D7:  ANDLW  7F
01D8:  BTFSC  03.2
01D9:  GOTO   1F4
01DA:  BCF    03.6
01DB:  MOVWF  31
01DC:  BSF    03.6
01DD:  MOVF   0D,W
01DE:  BCF    03.6
01DF:  MOVWF  32
01E0:  BSF    03.6
01E1:  MOVF   0F,W
01E2:  BCF    03.6
01E3:  MOVWF  33
01E4:  MOVF   31,W
01E5:  MOVWF  3A
01E6:  CALL   16E
01E7:  MOVF   32,W
01E8:  BSF    03.6
01E9:  MOVWF  0D
01EA:  BCF    03.6
01EB:  MOVF   33,W
01EC:  BSF    03.6
01ED:  MOVWF  0F
01EE:  INCF   0D,F
01EF:  BTFSC  03.2
01F0:  INCF   0F,F
01F1:  BCF    03.6
01F2:  GOTO   1A0
01F3:  BSF    03.6
01F4:  BCF    03.6
01F5:  RETURN
01F6:  MOVF   0B,W
01F7:  MOVWF  32
01F8:  BCF    0B.7
01F9:  BSF    03.5
01FA:  BSF    03.6
01FB:  BSF    0C.7
01FC:  BSF    0C.0
01FD:  NOP
01FE:  NOP
01FF:  BCF    03.5
0200:  BCF    03.6
0201:  BTFSC  32.7
0202:  BSF    0B.7
0203:  BTFSC  03.0
0204:  GOTO   22D
0205:  BSF    03.6
0206:  MOVF   0C,W
0207:  ANDLW  7F
0208:  BCF    03.6
0209:  MOVWF  32
020A:  BSF    03.6
020B:  MOVF   0D,W
020C:  BCF    03.6
020D:  MOVWF  33
020E:  BSF    03.6
020F:  MOVF   0F,W
0210:  BCF    03.6
0211:  MOVWF  34
0212:  MOVF   32,W
0213:  MOVWF  3A
0214:  CALL   16E
0215:  MOVF   33,W
0216:  BSF    03.6
0217:  MOVWF  0D
0218:  BCF    03.6
0219:  MOVF   34,W
021A:  BSF    03.6
021B:  MOVWF  0F
021C:  BCF    03.6
021D:  MOVF   0B,W
021E:  MOVWF  35
021F:  BCF    0B.7
0220:  BSF    03.5
0221:  BSF    03.6
0222:  BSF    0C.7
0223:  BSF    0C.0
0224:  NOP
0225:  NOP
0226:  BCF    03.5
0227:  BCF    03.6
0228:  BTFSC  35.7
0229:  BSF    0B.7
022A:  DECFSZ 31,F
022B:  GOTO   22D
022C:  GOTO   24C
022D:  BSF    03.6
022E:  RLF    0C,W
022F:  RLF    0E,W
0230:  ANDLW  7F
0231:  BCF    03.6
0232:  MOVWF  32
0233:  BSF    03.6
0234:  MOVF   0D,W
0235:  BCF    03.6
0236:  MOVWF  33
0237:  BSF    03.6
0238:  MOVF   0F,W
0239:  BCF    03.6
023A:  MOVWF  34
023B:  MOVF   32,W
023C:  MOVWF  3A
023D:  CALL   16E
023E:  MOVF   33,W
023F:  BSF    03.6
0240:  MOVWF  0D
0241:  BCF    03.6
0242:  MOVF   34,W
0243:  BSF    03.6
0244:  MOVWF  0F
0245:  INCF   0D,F
0246:  BTFSC  03.2
0247:  INCF   0F,F
0248:  BCF    03.0
0249:  BCF    03.6
024A:  DECFSZ 31,F
024B:  GOTO   1F6
024C:  RETURN
024D:  CLRF   39
024E:  MOVF   04,W
024F:  MOVWF  38
0250:  BCF    39.0
0251:  BTFSC  03.7
0252:  BSF    39.0
0253:  SWAPF  32,W
0254:  IORLW  F0
0255:  MOVWF  34
0256:  ADDWF  34,F
0257:  ADDLW  E2
0258:  MOVWF  35
0259:  ADDLW  32
025A:  MOVWF  37
025B:  MOVF   32,W
025C:  ANDLW  0F
025D:  ADDWF  35,F
025E:  ADDWF  35,F
025F:  ADDWF  37,F
0260:  ADDLW  E9
0261:  MOVWF  36
0262:  ADDWF  36,F
0263:  ADDWF  36,F
0264:  SWAPF  31,W
0265:  ANDLW  0F
0266:  ADDWF  36,F
0267:  ADDWF  37,F
0268:  RLF    36,F
0269:  RLF    37,F
026A:  COMF   37,F
026B:  RLF    37,F
026C:  MOVF   31,W
026D:  ANDLW  0F
026E:  ADDWF  37,F
026F:  RLF    34,F
0270:  MOVLW  07
0271:  MOVWF  33
0272:  MOVLW  0A
0273:  ADDWF  37,F
0274:  DECF   36,F
0275:  BTFSS  03.0
0276:  GOTO   273
0277:  ADDWF  36,F
0278:  DECF   35,F
0279:  BTFSS  03.0
027A:  GOTO   277
027B:  ADDWF  35,F
027C:  DECF   34,F
027D:  BTFSS  03.0
027E:  GOTO   27B
027F:  ADDWF  34,F
0280:  DECF   33,F
0281:  BTFSS  03.0
0282:  GOTO   27F
0283:  MOVLW  33
0284:  MOVWF  04
0285:  BCF    03.7
0286:  MOVLW  07
0287:  ANDWF  38,W
0288:  BCF    38.6
0289:  ADDWF  04,F
028A:  MOVLW  37
028B:  SUBWF  04,W
028C:  BTFSC  03.2
028D:  BSF    38.6
028E:  MOVF   00,W
028F:  MOVWF  77
0290:  BTFSS  03.2
0291:  GOTO   29A
0292:  BTFSC  38.6
0293:  GOTO   29A
0294:  BTFSC  38.4
0295:  GOTO   2AC
0296:  BTFSC  38.3
0297:  GOTO   29A
0298:  MOVLW  20
0299:  GOTO   29D
029A:  BSF    38.3
029B:  BCF    38.4
029C:  MOVLW  30
029D:  ADDWF  77,F
029E:  CLRF   32
029F:  MOVF   04,W
02A0:  MOVWF  31
02A1:  BCF    32.0
02A2:  BTFSC  03.7
02A3:  BSF    32.0
02A4:  MOVF   77,W
02A5:  MOVWF  3A
02A6:  CALL   16E
02A7:  MOVF   31,W
02A8:  MOVWF  04
02A9:  BCF    03.7
02AA:  BTFSC  32.0
02AB:  BSF    03.7
02AC:  INCF   04,F
02AD:  BTFSS  38.6
02AE:  GOTO   28A
02AF:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
0051:  MOVLW  44
0052:  MOVWF  04
0053:  BCF    03.7
0054:  MOVF   00,W
0055:  BTFSC  03.2
0056:  GOTO   064
0057:  MOVLW  06
0058:  MOVWF  78
0059:  CLRF   77
005A:  DECFSZ 77,F
005B:  GOTO   05A
005C:  DECFSZ 78,F
005D:  GOTO   059
005E:  MOVLW  7B
005F:  MOVWF  77
0060:  DECFSZ 77,F
0061:  GOTO   060
0062:  DECFSZ 00,F
0063:  GOTO   057
0064:  RETURN
....................  
....................  
.................... #include "lcd.c" 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
00D0:  MOVLW  0F
00D1:  BSF    03.5
00D2:  ANDWF  08,W
00D3:  IORLW  F0
00D4:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00D5:  BCF    03.5
00D6:  BSF    08.2
....................    delay_cycles(1); 
00D7:  NOP
....................    lcd_output_enable(1); 
00D8:  BSF    08.0
....................    delay_cycles(1); 
00D9:  NOP
....................    high = lcd_read_nibble(); 
00DA:  CALL   0C4
00DB:  MOVF   78,W
00DC:  MOVWF  42
....................        
....................    lcd_output_enable(0); 
00DD:  BCF    08.0
....................    delay_cycles(1); 
00DE:  NOP
....................    lcd_output_enable(1); 
00DF:  BSF    08.0
....................    delay_us(1); 
00E0:  GOTO   0E1
00E1:  GOTO   0E2
00E2:  NOP
....................    low = lcd_read_nibble(); 
00E3:  CALL   0C4
00E4:  MOVF   78,W
00E5:  MOVWF  41
....................        
....................    lcd_output_enable(0); 
00E6:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00E7:  MOVLW  0F
00E8:  BSF    03.5
00E9:  ANDWF  08,W
00EA:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00EB:  BCF    03.5
00EC:  SWAPF  42,W
00ED:  MOVWF  77
00EE:  MOVLW  F0
00EF:  ANDWF  77,F
00F0:  MOVF   77,W
00F1:  IORWF  41,W
00F2:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
00C4:  MOVF   08,W
00C5:  MOVWF  77
00C6:  SWAPF  08,W
00C7:  ANDLW  0F
00C8:  MOVWF  78
....................   #endif 
00C9:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
00B3:  SWAPF  42,W
00B4:  ANDLW  F0
00B5:  MOVWF  77
00B6:  MOVLW  0F
00B7:  ANDWF  08,W
00B8:  IORWF  77,W
00B9:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
00BA:  NOP
....................    lcd_output_enable(1); 
00BB:  BSF    08.0
....................    delay_us(2); 
00BC:  MOVLW  02
00BD:  MOVWF  77
00BE:  DECFSZ 77,F
00BF:  GOTO   0BE
00C0:  GOTO   0C1
00C1:  NOP
....................    lcd_output_enable(0); 
00C2:  BCF    08.0
00C3:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00CA:  BSF    03.5
00CB:  BCF    08.0
....................    lcd_rs_tris(); 
00CC:  BCF    08.1
....................    lcd_rw_tris(); 
00CD:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00CE:  BCF    03.5
00CF:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00F3:  MOVF   78,W
00F4:  MOVWF  41
00F5:  BTFSC  41.7
00F6:  GOTO   0D0
....................    lcd_output_rs(address); 
00F7:  BTFSS  3F.0
00F8:  BCF    08.1
00F9:  BTFSC  3F.0
00FA:  BSF    08.1
....................    delay_cycles(1); 
00FB:  NOP
....................    lcd_output_rw(0); 
00FC:  BCF    08.2
....................    delay_cycles(1); 
00FD:  NOP
....................    lcd_output_enable(0); 
00FE:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
00FF:  SWAPF  40,W
0100:  MOVWF  41
0101:  MOVLW  0F
0102:  ANDWF  41,F
0103:  MOVF   41,W
0104:  MOVWF  42
0105:  CALL   0B3
....................    lcd_send_nibble(n & 0xf); 
0106:  MOVF   40,W
0107:  ANDLW  0F
0108:  MOVWF  41
0109:  MOVWF  42
010A:  CALL   0B3
010B:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
010C:  MOVLW  28
010D:  MOVWF  32
010E:  MOVLW  0C
010F:  MOVWF  33
0110:  MOVLW  01
0111:  MOVWF  34
0112:  MOVLW  06
0113:  MOVWF  35
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0114:  BCF    08.0
....................    lcd_output_rs(0); 
0115:  BCF    08.1
....................    lcd_output_rw(0); 
0116:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0117:  MOVLW  0F
0118:  BSF    03.5
0119:  ANDWF  08,W
011A:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
011B:  BCF    08.0
....................    lcd_rs_tris(); 
011C:  BCF    08.1
....................    lcd_rw_tris(); 
011D:  BCF    08.2
011E:  BCF    03.5
011F:  CLRF   2B
0120:  BTFSC  0B.7
0121:  BSF    2B.7
0122:  BCF    0B.7
....................  #endif 
....................      
....................    delay_ms(15); 
0123:  MOVLW  0F
0124:  MOVWF  44
0125:  CALL   051
0126:  BTFSC  2B.7
0127:  BSF    0B.7
....................    for(i=1;i<=3;++i) 
0128:  MOVLW  01
0129:  MOVWF  31
012A:  MOVF   31,W
012B:  SUBLW  03
012C:  BTFSS  03.0
012D:  GOTO   13C
....................    { 
....................        lcd_send_nibble(3); 
012E:  MOVLW  03
012F:  MOVWF  42
0130:  CALL   0B3
0131:  CLRF   2B
0132:  BTFSC  0B.7
0133:  BSF    2B.7
0134:  BCF    0B.7
....................        delay_ms(5); 
0135:  MOVLW  05
0136:  MOVWF  44
0137:  CALL   051
0138:  BTFSC  2B.7
0139:  BSF    0B.7
013A:  INCF   31,F
013B:  GOTO   12A
....................    } 
....................     
....................    lcd_send_nibble(2); 
013C:  MOVLW  02
013D:  MOVWF  42
013E:  CALL   0B3
013F:  CLRF   2B
0140:  BTFSC  0B.7
0141:  BSF    2B.7
0142:  BCF    0B.7
....................    delay_ms(5); 
0143:  MOVLW  05
0144:  MOVWF  44
0145:  CALL   051
0146:  BTFSC  2B.7
0147:  BSF    0B.7
....................    for(i=0;i<=3;++i) 
0148:  CLRF   31
0149:  MOVF   31,W
014A:  SUBLW  03
014B:  BTFSS  03.0
014C:  GOTO   159
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
014D:  MOVLW  32
014E:  ADDWF  31,W
014F:  MOVWF  04
0150:  BCF    03.7
0151:  MOVF   00,W
0152:  MOVWF  36
0153:  CLRF   3F
0154:  MOVF   36,W
0155:  MOVWF  40
0156:  CALL   0CA
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0157:  INCF   31,F
0158:  GOTO   149
0159:  BCF    0A.3
015A:  BCF    0A.4
015B:  GOTO   2D7 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
015C:  DECFSZ 3C,W
015D:  GOTO   15F
015E:  GOTO   162
....................       address=LCD_LINE_TWO; 
015F:  MOVLW  40
0160:  MOVWF  3D
0161:  GOTO   163
....................    else 
....................       address=0; 
0162:  CLRF   3D
....................       
....................    address+=x-1; 
0163:  MOVLW  01
0164:  SUBWF  3B,W
0165:  ADDWF  3D,F
....................    lcd_send_byte(0,0x80|address); 
0166:  MOVF   3D,W
0167:  IORLW  80
0168:  MOVWF  3E
0169:  CLRF   3F
016A:  MOVF   3E,W
016B:  MOVWF  40
016C:  CALL   0CA
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
016D:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
016E:  MOVF   3A,W
016F:  XORLW  07
0170:  BTFSC  03.2
0171:  GOTO   17C
0172:  XORLW  0B
0173:  BTFSC  03.2
0174:  GOTO   181
0175:  XORLW  06
0176:  BTFSC  03.2
0177:  GOTO   18F
0178:  XORLW  02
0179:  BTFSC  03.2
017A:  GOTO   195
017B:  GOTO   19A
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
017C:  MOVLW  01
017D:  MOVWF  3B
017E:  MOVWF  3C
017F:  CALL   15C
0180:  GOTO   19F
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0181:  CLRF   3F
0182:  MOVLW  01
0183:  MOVWF  40
0184:  CALL   0CA
0185:  CLRF   2B
0186:  BTFSC  0B.7
0187:  BSF    2B.7
0188:  BCF    0B.7
....................                      delay_ms(2); 
0189:  MOVLW  02
018A:  MOVWF  44
018B:  CALL   051
018C:  BTFSC  2B.7
018D:  BSF    0B.7
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
018E:  GOTO   19F
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
018F:  MOVLW  01
0190:  MOVWF  3B
0191:  MOVLW  02
0192:  MOVWF  3C
0193:  CALL   15C
0194:  GOTO   19F
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0195:  CLRF   3F
0196:  MOVLW  10
0197:  MOVWF  40
0198:  CALL   0CA
0199:  GOTO   19F
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
019A:  MOVLW  01
019B:  MOVWF  3F
019C:  MOVF   3A,W
019D:  MOVWF  40
019E:  CALL   0CA
....................      #endif 
....................    } 
019F:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... #INT_AD 
.................... void  AD_isr(void)  
.................... { 
....................    output_high(pin_c5); 
*
0065:  BCF    2C.5
0066:  MOVF   2C,W
0067:  BSF    03.5
0068:  MOVWF  07
0069:  BCF    03.5
006A:  BSF    07.5
....................    delay_ms(200); 
006B:  MOVLW  C8
006C:  MOVWF  44
006D:  CALL   051
....................    output_low(pin_c5); 
006E:  BCF    2C.5
006F:  MOVF   2C,W
0070:  BSF    03.5
0071:  MOVWF  07
0072:  BCF    03.5
0073:  BCF    07.5
0074:  BCF    0C.6
0075:  BCF    0A.3
0076:  BCF    0A.4
0077:  GOTO   02D
.................... } 
....................  
....................  
.................... int16 adcval1,adcval2; 
....................  
.................... void main() 
*
02B0:  MOVF   03,W
02B1:  ANDLW  1F
02B2:  MOVWF  03
02B3:  MOVLW  FF
02B4:  MOVWF  2C
02B5:  BSF    03.5
02B6:  BSF    1F.0
02B7:  BSF    1F.1
02B8:  BSF    1F.2
02B9:  BCF    1F.3
02BA:  MOVLW  07
02BB:  MOVWF  1C
02BC:  BCF    03.7
.................... { 
....................    set_tris_c(0x00); 
02BD:  MOVLW  00
02BE:  MOVWF  07
02BF:  BCF    03.5
02C0:  MOVWF  2C
....................    set_tris_e(0x0f); 
02C1:  BSF    03.5
02C2:  BSF    09.0
02C3:  BSF    09.1
02C4:  BSF    09.2
....................  
....................  
....................    setup_adc_ports(AN0_AN1_AN3); 
02C5:  BCF    1F.0
02C6:  BCF    1F.1
02C7:  BSF    1F.2
02C8:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_INTERNAL); 
02C9:  BCF    1F.6
02CA:  BCF    03.5
02CB:  BSF    1F.6
02CC:  BSF    1F.7
02CD:  BSF    03.5
02CE:  BCF    1F.7
02CF:  BCF    03.5
02D0:  BSF    1F.0
....................  
....................    enable_interrupts(INT_AD); 
02D1:  BSF    03.5
02D2:  BSF    0C.6
....................    enable_interrupts(GLOBAL); 
02D3:  MOVLW  C0
02D4:  BCF    03.5
02D5:  IORWF  0B,F
....................  
....................    lcd_init(); 
02D6:  GOTO   10C
....................     
....................    lcd_gotoxy(1,1); 
02D7:  MOVLW  01
02D8:  MOVWF  3B
02D9:  MOVWF  3C
02DA:  CALL   15C
....................    printf(lcd_putc,"Tahsin Soytek"); 
02DB:  MOVLW  78
02DC:  BSF    03.6
02DD:  MOVWF  0D
02DE:  MOVLW  00
02DF:  MOVWF  0F
02E0:  BCF    03.6
02E1:  CALL   1A0
....................     
....................    lcd_gotoxy(1,2); 
02E2:  MOVLW  01
02E3:  MOVWF  3B
02E4:  MOVLW  02
02E5:  MOVWF  3C
02E6:  CALL   15C
....................    printf(lcd_putc,"ADC Sample"); 
02E7:  MOVLW  7F
02E8:  BSF    03.6
02E9:  MOVWF  0D
02EA:  MOVLW  00
02EB:  MOVWF  0F
02EC:  BCF    03.6
02ED:  CALL   1A0
....................    delay_ms(1500); 
02EE:  MOVLW  06
02EF:  MOVWF  31
02F0:  CLRF   2B
02F1:  BTFSC  0B.7
02F2:  BSF    2B.7
02F3:  BCF    0B.7
02F4:  MOVLW  FA
02F5:  MOVWF  44
02F6:  CALL   051
02F7:  BTFSC  2B.7
02F8:  BSF    0B.7
02F9:  DECFSZ 31,F
02FA:  GOTO   2F0
....................     
....................    while(TRUE) 
....................    { 
....................       set_adc_channel(0); 
02FB:  MOVLW  00
02FC:  MOVWF  78
02FD:  MOVF   1F,W
02FE:  ANDLW  C7
02FF:  IORWF  78,W
0300:  MOVWF  1F
....................       delay_us(80); 
0301:  MOVLW  84
0302:  MOVWF  77
0303:  DECFSZ 77,F
0304:  GOTO   303
0305:  GOTO   306
0306:  NOP
....................       adcval1=read_adc(); 
0307:  BSF    1F.2
0308:  BTFSC  1F.2
0309:  GOTO   308
030A:  BSF    03.5
030B:  MOVF   1E,W
030C:  BCF    03.5
030D:  MOVWF  2D
030E:  MOVF   1E,W
030F:  MOVWF  2E
....................        
....................       lcd_gotoxy(1,1); 
0310:  MOVLW  01
0311:  MOVWF  3B
0312:  MOVWF  3C
0313:  CALL   15C
....................       printf(lcd_putc,"AN0                               "); 
0314:  MOVLW  85
0315:  BSF    03.6
0316:  MOVWF  0D
0317:  MOVLW  00
0318:  MOVWF  0F
0319:  BCF    03.6
031A:  CALL   1A0
....................       lcd_gotoxy(1,2); 
031B:  MOVLW  01
031C:  MOVWF  3B
031D:  MOVLW  02
031E:  MOVWF  3C
031F:  CALL   15C
....................       printf(lcd_putc,"Value:%lu",adcval1); 
0320:  MOVLW  97
0321:  BSF    03.6
0322:  MOVWF  0D
0323:  MOVLW  00
0324:  MOVWF  0F
0325:  BCF    03.0
0326:  MOVLW  06
0327:  BCF    03.6
0328:  MOVWF  31
0329:  CALL   1F6
032A:  MOVLW  10
032B:  MOVWF  04
032C:  MOVF   2E,W
032D:  MOVWF  32
032E:  MOVF   2D,W
032F:  MOVWF  31
0330:  CALL   24D
....................       delay_ms(2000); 
0331:  MOVLW  08
0332:  MOVWF  31
0333:  CLRF   2B
0334:  BTFSC  0B.7
0335:  BSF    2B.7
0336:  BCF    0B.7
0337:  MOVLW  FA
0338:  MOVWF  44
0339:  CALL   051
033A:  BTFSC  2B.7
033B:  BSF    0B.7
033C:  DECFSZ 31,F
033D:  GOTO   333
....................        
....................        
....................       set_adc_channel(1); 
033E:  MOVLW  08
033F:  MOVWF  78
0340:  MOVF   1F,W
0341:  ANDLW  C7
0342:  IORWF  78,W
0343:  MOVWF  1F
....................       delay_us(20); 
0344:  MOVLW  20
0345:  MOVWF  77
0346:  DECFSZ 77,F
0347:  GOTO   346
0348:  GOTO   349
0349:  NOP
....................       adcval2=read_adc(); 
034A:  BSF    1F.2
034B:  BTFSC  1F.2
034C:  GOTO   34B
034D:  BSF    03.5
034E:  MOVF   1E,W
034F:  BCF    03.5
0350:  MOVWF  2F
0351:  MOVF   1E,W
0352:  MOVWF  30
....................        
....................       lcd_gotoxy(1,1); 
0353:  MOVLW  01
0354:  MOVWF  3B
0355:  MOVWF  3C
0356:  CALL   15C
....................       printf(lcd_putc,"AN1                               "); 
0357:  MOVLW  9C
0358:  BSF    03.6
0359:  MOVWF  0D
035A:  MOVLW  00
035B:  MOVWF  0F
035C:  BCF    03.6
035D:  CALL   1A0
....................       lcd_gotoxy(1,2); 
035E:  MOVLW  01
035F:  MOVWF  3B
0360:  MOVLW  02
0361:  MOVWF  3C
0362:  CALL   15C
....................       printf(lcd_putc,"Value:%lu",adcval2); 
0363:  MOVLW  AE
0364:  BSF    03.6
0365:  MOVWF  0D
0366:  MOVLW  00
0367:  MOVWF  0F
0368:  BCF    03.0
0369:  MOVLW  06
036A:  BCF    03.6
036B:  MOVWF  31
036C:  CALL   1F6
036D:  MOVLW  10
036E:  MOVWF  04
036F:  MOVF   30,W
0370:  MOVWF  32
0371:  MOVF   2F,W
0372:  MOVWF  31
0373:  CALL   24D
....................       delay_ms(2000); 
0374:  MOVLW  08
0375:  MOVWF  31
0376:  CLRF   2B
0377:  BTFSC  0B.7
0378:  BSF    2B.7
0379:  BCF    0B.7
037A:  MOVLW  FA
037B:  MOVWF  44
037C:  CALL   051
037D:  BTFSC  2B.7
037E:  BSF    0B.7
037F:  DECFSZ 31,F
0380:  GOTO   376
0381:  GOTO   2FB
....................        
....................        
....................    } 
....................  
.................... } 
0382:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
