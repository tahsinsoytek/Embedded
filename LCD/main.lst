CCS PCM C Compiler, Version 5.015, 5967               02-Aðu-21 17:57

               Filename:   D:\Masaüstü\Embedded Systems(Gömülü Sistemler)\Projeler\Proje 10(LCD)\main.lst

               ROM used:   509 words (6%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           22 (6%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1BD
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA CE,34
0005:  DATA F3,39
0006:  DATA 61,37
0007:  DATA 00,00
0008:  DATA D3,35
0009:  DATA 79,36
000A:  DATA 69,37
000B:  DATA 65,10
000C:  DATA 47,2A
000D:  DATA 2D,29
000E:  DATA 20,29
000F:  DATA 33,00
*
00F9:  MOVF   0B,W
00FA:  MOVWF  22
00FB:  BCF    0B.7
00FC:  BSF    03.5
00FD:  BSF    03.6
00FE:  BSF    0C.7
00FF:  BSF    0C.0
0100:  NOP
0101:  NOP
0102:  BCF    03.5
0103:  BCF    03.6
0104:  BTFSC  22.7
0105:  BSF    0B.7
0106:  BSF    03.6
0107:  MOVF   0C,W
0108:  ANDLW  7F
0109:  BTFSC  03.2
010A:  GOTO   14D
010B:  BCF    03.6
010C:  MOVWF  22
010D:  BSF    03.6
010E:  MOVF   0D,W
010F:  BCF    03.6
0110:  MOVWF  23
0111:  BSF    03.6
0112:  MOVF   0F,W
0113:  BCF    03.6
0114:  MOVWF  24
0115:  MOVF   22,W
0116:  MOVWF  28
0117:  CALL   0CD
0118:  MOVF   23,W
0119:  BSF    03.6
011A:  MOVWF  0D
011B:  BCF    03.6
011C:  MOVF   24,W
011D:  BSF    03.6
011E:  MOVWF  0F
011F:  BCF    03.6
0120:  MOVF   0B,W
0121:  MOVWF  25
0122:  BCF    0B.7
0123:  BSF    03.5
0124:  BSF    03.6
0125:  BSF    0C.7
0126:  BSF    0C.0
0127:  NOP
0128:  NOP
0129:  BCF    03.5
012A:  BCF    03.6
012B:  BTFSC  25.7
012C:  BSF    0B.7
012D:  BSF    03.6
012E:  RLF    0C,W
012F:  RLF    0E,W
0130:  ANDLW  7F
0131:  BTFSC  03.2
0132:  GOTO   14D
0133:  BCF    03.6
0134:  MOVWF  22
0135:  BSF    03.6
0136:  MOVF   0D,W
0137:  BCF    03.6
0138:  MOVWF  23
0139:  BSF    03.6
013A:  MOVF   0F,W
013B:  BCF    03.6
013C:  MOVWF  24
013D:  MOVF   22,W
013E:  MOVWF  28
013F:  CALL   0CD
0140:  MOVF   23,W
0141:  BSF    03.6
0142:  MOVWF  0D
0143:  BCF    03.6
0144:  MOVF   24,W
0145:  BSF    03.6
0146:  MOVWF  0F
0147:  INCF   0D,F
0148:  BTFSC  03.2
0149:  INCF   0F,F
014A:  BCF    03.6
014B:  GOTO   0F9
014C:  BSF    03.6
014D:  BCF    03.6
014E:  RETURN
014F:  MOVF   29,W
0150:  CLRF   78
0151:  SUBWF  28,W
0152:  BTFSC  03.0
0153:  GOTO   157
0154:  MOVF   28,W
0155:  MOVWF  77
0156:  GOTO   163
0157:  CLRF   77
0158:  MOVLW  08
0159:  MOVWF  2A
015A:  RLF    28,F
015B:  RLF    77,F
015C:  MOVF   29,W
015D:  SUBWF  77,W
015E:  BTFSC  03.0
015F:  MOVWF  77
0160:  RLF    78,F
0161:  DECFSZ 2A,F
0162:  GOTO   15A
0163:  RETURN
0164:  MOVLW  20
0165:  BTFSS  23.4
0166:  MOVLW  30
0167:  MOVWF  24
0168:  MOVF   22,W
0169:  MOVWF  77
016A:  BTFSS  22.7
016B:  GOTO   174
016C:  COMF   77,F
016D:  INCF   77,F
016E:  MOVF   77,W
016F:  MOVWF  22
0170:  MOVLW  2D
0171:  MOVWF  24
0172:  BSF    23.7
0173:  BSF    23.0
0174:  MOVF   22,W
0175:  MOVWF  28
0176:  MOVLW  64
0177:  MOVWF  29
0178:  CALL   14F
0179:  MOVF   77,W
017A:  MOVWF  22
017B:  MOVLW  30
017C:  ADDWF  78,W
017D:  MOVWF  25
017E:  MOVF   22,W
017F:  MOVWF  28
0180:  MOVLW  0A
0181:  MOVWF  29
0182:  CALL   14F
0183:  MOVLW  30
0184:  ADDWF  77,W
0185:  MOVWF  27
0186:  MOVLW  30
0187:  ADDWF  78,W
0188:  MOVWF  26
0189:  MOVF   24,W
018A:  MOVWF  77
018B:  MOVLW  30
018C:  SUBWF  25,W
018D:  BTFSC  03.2
018E:  GOTO   193
018F:  BSF    23.1
0190:  BTFSC  23.7
0191:  BSF    23.2
0192:  GOTO   1A7
0193:  MOVF   24,W
0194:  MOVWF  25
0195:  MOVLW  20
0196:  MOVWF  24
0197:  MOVLW  30
0198:  SUBWF  26,W
0199:  BTFSC  03.2
019A:  GOTO   19F
019B:  BSF    23.0
019C:  BTFSC  23.7
019D:  BSF    23.1
019E:  GOTO   1A7
019F:  BTFSS  03.2
01A0:  BSF    23.0
01A1:  BTFSS  03.2
01A2:  GOTO   1A7
01A3:  MOVF   25,W
01A4:  MOVWF  26
01A5:  MOVLW  20
01A6:  MOVWF  25
01A7:  BTFSC  23.2
01A8:  GOTO   1AE
01A9:  BTFSC  23.1
01AA:  GOTO   1B1
01AB:  BTFSC  23.0
01AC:  GOTO   1B4
01AD:  GOTO   1B7
01AE:  MOVF   24,W
01AF:  MOVWF  28
01B0:  CALL   0CD
01B1:  MOVF   25,W
01B2:  MOVWF  28
01B3:  CALL   0CD
01B4:  MOVF   26,W
01B5:  MOVWF  28
01B6:  CALL   0CD
01B7:  MOVF   27,W
01B8:  MOVWF  28
01B9:  CALL   0CD
01BA:  BCF    0A.3
01BB:  BCF    0A.4
01BC:  GOTO   1F3 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
0010:  MOVLW  29
0011:  MOVWF  04
0012:  BCF    03.7
0013:  MOVF   00,W
0014:  BTFSC  03.2
0015:  GOTO   023
0016:  MOVLW  06
0017:  MOVWF  78
0018:  CLRF   77
0019:  DECFSZ 77,F
001A:  GOTO   019
001B:  DECFSZ 78,F
001C:  GOTO   018
001D:  MOVLW  7B
001E:  MOVWF  77
001F:  DECFSZ 77,F
0020:  GOTO   01F
0021:  DECFSZ 00,F
0022:  GOTO   016
0023:  RETURN
....................  
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0041:  MOVLW  0F
0042:  BSF    03.5
0043:  ANDWF  08,W
0044:  IORLW  F0
0045:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0046:  BCF    03.5
0047:  BSF    08.2
....................    delay_cycles(1); 
0048:  NOP
....................    lcd_output_enable(1); 
0049:  BSF    08.0
....................    delay_cycles(1); 
004A:  NOP
....................    high = lcd_read_nibble(); 
004B:  CALL   035
004C:  MOVF   78,W
004D:  MOVWF  30
....................        
....................    lcd_output_enable(0); 
004E:  BCF    08.0
....................    delay_cycles(1); 
004F:  NOP
....................    lcd_output_enable(1); 
0050:  BSF    08.0
....................    delay_us(1); 
0051:  GOTO   052
0052:  GOTO   053
0053:  NOP
....................    low = lcd_read_nibble(); 
0054:  CALL   035
0055:  MOVF   78,W
0056:  MOVWF  2F
....................        
....................    lcd_output_enable(0); 
0057:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0058:  MOVLW  0F
0059:  BSF    03.5
005A:  ANDWF  08,W
005B:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
005C:  BCF    03.5
005D:  SWAPF  30,W
005E:  MOVWF  77
005F:  MOVLW  F0
0060:  ANDWF  77,F
0061:  MOVF   77,W
0062:  IORWF  2F,W
0063:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0035:  MOVF   08,W
0036:  MOVWF  77
0037:  SWAPF  08,W
0038:  ANDLW  0F
0039:  MOVWF  78
....................   #endif 
003A:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0024:  SWAPF  30,W
0025:  ANDLW  F0
0026:  MOVWF  77
0027:  MOVLW  0F
0028:  ANDWF  08,W
0029:  IORWF  77,W
002A:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
002B:  NOP
....................    lcd_output_enable(1); 
002C:  BSF    08.0
....................    delay_us(2); 
002D:  MOVLW  02
002E:  MOVWF  77
002F:  DECFSZ 77,F
0030:  GOTO   02F
0031:  GOTO   032
0032:  NOP
....................    lcd_output_enable(0); 
0033:  BCF    08.0
0034:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
003B:  BSF    03.5
003C:  BCF    08.0
....................    lcd_rs_tris(); 
003D:  BCF    08.1
....................    lcd_rw_tris(); 
003E:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
003F:  BCF    03.5
0040:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0064:  MOVF   78,W
0065:  MOVWF  2F
0066:  BTFSC  2F.7
0067:  GOTO   041
....................    lcd_output_rs(address); 
0068:  BTFSS  2D.0
0069:  BCF    08.1
006A:  BTFSC  2D.0
006B:  BSF    08.1
....................    delay_cycles(1); 
006C:  NOP
....................    lcd_output_rw(0); 
006D:  BCF    08.2
....................    delay_cycles(1); 
006E:  NOP
....................    lcd_output_enable(0); 
006F:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0070:  SWAPF  2E,W
0071:  MOVWF  2F
0072:  MOVLW  0F
0073:  ANDWF  2F,F
0074:  MOVF   2F,W
0075:  MOVWF  30
0076:  CALL   024
....................    lcd_send_nibble(n & 0xf); 
0077:  MOVF   2E,W
0078:  ANDLW  0F
0079:  MOVWF  2F
007A:  MOVWF  30
007B:  CALL   024
007C:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
007D:  MOVLW  28
007E:  MOVWF  23
007F:  MOVLW  0C
0080:  MOVWF  24
0081:  MOVLW  01
0082:  MOVWF  25
0083:  MOVLW  06
0084:  MOVWF  26
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0085:  BCF    08.0
....................    lcd_output_rs(0); 
0086:  BCF    08.1
....................    lcd_output_rw(0); 
0087:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0088:  MOVLW  0F
0089:  BSF    03.5
008A:  ANDWF  08,W
008B:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
008C:  BCF    08.0
....................    lcd_rs_tris(); 
008D:  BCF    08.1
....................    lcd_rw_tris(); 
008E:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
008F:  MOVLW  0F
0090:  BCF    03.5
0091:  MOVWF  29
0092:  CALL   010
....................    for(i=1;i<=3;++i) 
0093:  MOVLW  01
0094:  MOVWF  22
0095:  MOVF   22,W
0096:  SUBLW  03
0097:  BTFSS  03.0
0098:  GOTO   0A1
....................    { 
....................        lcd_send_nibble(3); 
0099:  MOVLW  03
009A:  MOVWF  30
009B:  CALL   024
....................        delay_ms(5); 
009C:  MOVLW  05
009D:  MOVWF  29
009E:  CALL   010
009F:  INCF   22,F
00A0:  GOTO   095
....................    } 
....................     
....................    lcd_send_nibble(2); 
00A1:  MOVLW  02
00A2:  MOVWF  30
00A3:  CALL   024
....................    delay_ms(5); 
00A4:  MOVLW  05
00A5:  MOVWF  29
00A6:  CALL   010
....................    for(i=0;i<=3;++i) 
00A7:  CLRF   22
00A8:  MOVF   22,W
00A9:  SUBLW  03
00AA:  BTFSS  03.0
00AB:  GOTO   0B8
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00AC:  MOVLW  23
00AD:  ADDWF  22,W
00AE:  MOVWF  04
00AF:  BCF    03.7
00B0:  MOVF   00,W
00B1:  MOVWF  27
00B2:  CLRF   2D
00B3:  MOVF   27,W
00B4:  MOVWF  2E
00B5:  CALL   03B
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00B6:  INCF   22,F
00B7:  GOTO   0A8
00B8:  BCF    0A.3
00B9:  BCF    0A.4
00BA:  GOTO   1CA (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00BB:  DECFSZ 2A,W
00BC:  GOTO   0BE
00BD:  GOTO   0C1
....................       address=LCD_LINE_TWO; 
00BE:  MOVLW  40
00BF:  MOVWF  2B
00C0:  GOTO   0C2
....................    else 
....................       address=0; 
00C1:  CLRF   2B
....................       
....................    address+=x-1; 
00C2:  MOVLW  01
00C3:  SUBWF  29,W
00C4:  ADDWF  2B,F
....................    lcd_send_byte(0,0x80|address); 
00C5:  MOVF   2B,W
00C6:  IORLW  80
00C7:  MOVWF  2C
00C8:  CLRF   2D
00C9:  MOVF   2C,W
00CA:  MOVWF  2E
00CB:  CALL   03B
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00CC:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00CD:  MOVF   28,W
00CE:  XORLW  07
00CF:  BTFSC  03.2
00D0:  GOTO   0DB
00D1:  XORLW  0B
00D2:  BTFSC  03.2
00D3:  GOTO   0E0
00D4:  XORLW  06
00D5:  BTFSC  03.2
00D6:  GOTO   0E8
00D7:  XORLW  02
00D8:  BTFSC  03.2
00D9:  GOTO   0EE
00DA:  GOTO   0F3
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00DB:  MOVLW  01
00DC:  MOVWF  29
00DD:  MOVWF  2A
00DE:  CALL   0BB
00DF:  GOTO   0F8
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00E0:  CLRF   2D
00E1:  MOVLW  01
00E2:  MOVWF  2E
00E3:  CALL   03B
....................                      delay_ms(2); 
00E4:  MOVLW  02
00E5:  MOVWF  29
00E6:  CALL   010
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00E7:  GOTO   0F8
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00E8:  MOVLW  01
00E9:  MOVWF  29
00EA:  MOVLW  02
00EB:  MOVWF  2A
00EC:  CALL   0BB
00ED:  GOTO   0F8
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00EE:  CLRF   2D
00EF:  MOVLW  10
00F0:  MOVWF  2E
00F1:  CALL   03B
00F2:  GOTO   0F8
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00F3:  MOVLW  01
00F4:  MOVWF  2D
00F5:  MOVF   28,W
00F6:  MOVWF  2E
00F7:  CALL   03B
....................      #endif 
....................    } 
00F8:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... void main() 
*
01BD:  MOVF   03,W
01BE:  ANDLW  1F
01BF:  MOVWF  03
01C0:  BSF    03.5
01C1:  BSF    1F.0
01C2:  BSF    1F.1
01C3:  BSF    1F.2
01C4:  BCF    1F.3
01C5:  MOVLW  07
01C6:  MOVWF  1C
01C7:  BCF    03.7
.................... { 
....................    lcd_init(); 
01C8:  BCF    03.5
01C9:  GOTO   07D
....................     
....................    int counter=2; 
01CA:  MOVLW  02
01CB:  MOVWF  21
....................    lcd_gotoxy(1,1); 
01CC:  MOVLW  01
01CD:  MOVWF  29
01CE:  MOVWF  2A
01CF:  CALL   0BB
....................    lcd_putc("Nissan"); 
01D0:  MOVLW  04
01D1:  BSF    03.6
01D2:  MOVWF  0D
01D3:  MOVLW  00
01D4:  MOVWF  0F
01D5:  BCF    03.6
01D6:  CALL   0F9
....................    lcd_gotoxy(1,2); 
01D7:  MOVLW  01
01D8:  MOVWF  29
01D9:  MOVLW  02
01DA:  MOVWF  2A
01DB:  CALL   0BB
....................    lcd_putc("Skyline GT-R R3"); 
01DC:  MOVLW  08
01DD:  BSF    03.6
01DE:  MOVWF  0D
01DF:  MOVLW  00
01E0:  MOVWF  0F
01E1:  BCF    03.6
01E2:  CALL   0F9
....................    
....................     
....................    while(TRUE) 
....................    { 
....................       lcd_gotoxy(16,2); 
01E3:  MOVLW  10
01E4:  MOVWF  29
01E5:  MOVLW  02
01E6:  MOVWF  2A
01E7:  CALL   0BB
....................       if(counter==5) 
01E8:  MOVF   21,W
01E9:  SUBLW  05
01EA:  BTFSS  03.2
01EB:  GOTO   1EE
....................       { 
....................          counter=2; 
01EC:  MOVLW  02
01ED:  MOVWF  21
....................       } 
....................       printf(lcd_putc,"%d",counter); 
01EE:  MOVF   21,W
01EF:  MOVWF  22
01F0:  MOVLW  18
01F1:  MOVWF  23
01F2:  GOTO   164
....................       counter++; 
01F3:  INCF   21,F
....................       delay_ms(1000); 
01F4:  MOVLW  04
01F5:  MOVWF  22
01F6:  MOVLW  FA
01F7:  MOVWF  29
01F8:  CALL   010
01F9:  DECFSZ 22,F
01FA:  GOTO   1F6
01FB:  GOTO   1E3
....................    } 
....................  
.................... } 
01FC:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
